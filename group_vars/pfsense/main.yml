---
# pfSense Configuration Variables
# Follows project-structure.md variable hierarchy and patterns

# Domain configuration for services
domain: "jardoole.xyz"

# Network configuration
network:
  wan_interface: "igb0"
  lan_interface: "igb1"
  lan_network: "192.168.0.0/24"
  k3s_cluster_ips:
    - "192.168.0.21"  # pi-cm5-1
    - "192.168.0.22"  # pi-cm5-2
    - "192.168.0.23"  # pi-cm5-3
  minio_nas_ip: "192.168.0.24"  # pi-cm5-4

# ACME (Let's Encrypt) configuration
acme:
  enabled: true
  account_name: "letsencrypt-production"
  account_email: "admin@{{ domain }}"
  server: "letsencrypt-production-v2"
  certificate_name: "{{ domain }}-wildcard"
  domains:
    - "*.{{ domain }}"
    - "{{ domain }}"
  # Cloudflare API token will be stored in vault.yml
  dns_provider: "cloudflare"
  key_size: 384  # 384-bit ECDSA for highest security

# HAProxy configuration
haproxy:
  enabled: true
  stats:
    enabled: true
    uri: "/haproxy-stats"
    admin: true
  global:
    maxconn: 1000
    threads: 2  # Optimal for pfSense hardware

  # Backend pool definitions
  backends:
    k3s_cluster:
      name: "k3s-cluster"
      mode: "http"
      balance: "roundrobin"
      health_check:
        method: "GET"
        uri: "/healthz"
        interval: "5s"
        fall: 3
        rise: 2
      servers:
        - name: "pi-cm5-1"
          address: "{{ network.k3s_cluster_ips[0] }}"
          port: 80
          weight: 1
        - name: "pi-cm5-2"
          address: "{{ network.k3s_cluster_ips[1] }}"
          port: 80
          weight: 1
        - name: "pi-cm5-3"
          address: "{{ network.k3s_cluster_ips[2] }}"
          port: 80
          weight: 1

    minio_nas:
      name: "minio-nas"
      mode: "http"
      balance: "roundrobin"
      servers:
        - name: "pi-cm5-4"
          address: "{{ network.minio_nas_ip }}"
          port: 443
          weight: 1

  # Frontend definitions
  frontends:
    https_frontend:
      name: "https-frontend"
      bind_address: "wan"
      bind_port: 443
      mode: "http"
      ssl_offloading: true
      certificate: "{{ acme.certificate_name }}"
      # Host-based routing rules
      acls:
        - name: "minio_host"
          criterion: "hdr(host)"
          value: "minio.{{ domain }}"
        - name: "api_host"
          criterion: "hdr(host)"
          value: "api.{{ domain }}"
      actions:
        - condition: "minio_host"
          action: "use_backend"
          backend: "minio-nas"
        - condition: "api_host"
          action: "use_backend"
          backend: "minio-nas"
        - condition: "default"
          action: "use_backend"
          backend: "k3s-cluster"

    http_redirect:
      name: "http-redirect"
      bind_address: "wan"
      bind_port: 80
      mode: "http"
      redirect_scheme: "https"
      redirect_code: 301

# Firewall rules configuration
firewall:
  wan_rules:
    - name: "Allow HTTPS to HAProxy"
      interface: "wan"
      protocol: "tcp"
      source: "any"
      destination: "wan_address"
      destination_port: 443
      action: "pass"
      description: "HTTPS traffic to HAProxy load balancer"

    - name: "Allow HTTP to HAProxy"
      interface: "wan"
      protocol: "tcp"
      source: "any"
      destination: "wan_address"
      destination_port: 80
      action: "pass"
      description: "HTTP traffic for HTTPS redirect"

  # LAN rules typically use default allow-all rule
  lan_rules: []

# Package management
packages:
  required:
    - "pfSense-pkg-haproxy"
    - "pfSense-pkg-acme"

# System configuration
system:
  hostname: "pfsense"
  domain: "{{ domain }}"
  timezone: "America/New_York"

# DNS configuration
dns:
  servers:
    - "1.1.1.1"  # Cloudflare
    - "1.0.0.1"  # Cloudflare secondary
  domain_overrides: []

# Logging configuration
logging:
  haproxy:
    enabled: true
    level: "info"
  system:
    enabled: true
    level: "info"
