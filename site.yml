---
# Master orchestration playbook for home lab infrastructure
# Executes base configuration in the correct order for full cluster setup

- name: Home Lab Infrastructure Setup
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Display setup overview
      ansible.builtin.debug:
        msg: |
          Home Lab Infrastructure Setup
          ============================

          Target Infrastructure:
          - K3s Cluster: pi-cm5-1 (control), pi-cm5-2,3 (workers), Beelink (storage worker)
          - NAS: pi-cm5-4 (MinIO S3 backup server)

          Execution Order:
          1. Base Pi CM5 configuration (all Pi nodes)
          2. System upgrades and security updates
          3. Storage configuration (NAS node disk preparation)
          4. Parallel Infrastructure Services:
             a. MinIO S3 backup service installation (NAS)
             b. K3s cluster installation (cluster nodes)

          Future Steps (see TODO.md):
          - Longhorn distributed storage
          - Integration and monitoring

# Phase 1: Base Configuration for all Pi CM5 nodes
- name: Phase 1 - Base Pi CM5 Configuration
  import_playbook: playbooks/pi-base-config.yml

# Phase 2: System maintenance - establish clean base before applications
- name: Phase 2a - System Upgrades
  import_playbook: playbooks/upgrade.yml
- name: Phase 2b - Unattended Upgrades Setup
  import_playbook: playbooks/unattended-upgrades.yml

# Phase 3: Storage-specific configuration for NAS node
- name: Phase 3 - Storage Configuration
  import_playbook: playbooks/pi-storage-config.yml

# Phase 4: Parallel Infrastructure Services Installation
# MinIO and K3s run in parallel using async execution
# They target different hosts and have no direct dependencies
- name: Phase 4 - Parallel Infrastructure Services
  hosts: localhost
  gather_facts: true
  tasks:
    - name: Record parallel deployment start time
      ansible.builtin.set_fact:
        parallel_start_time: "{{ ansible_date_time.iso8601 }}"

    - name: Start MinIO installation (async)
      ansible.builtin.command:
        cmd: uv run ansible-playbook -i hosts.ini playbooks/minio-complete.yml --diff
        chdir: "{{ playbook_dir }}"
      async: 1800  # 30 minutes timeout
      poll: 0
      register: minio_job
      changed_when: true  # This always makes changes (installation)
      environment:
        ANSIBLE_ROLES_PATH: "{{ playbook_dir }}/roles:~/.ansible/roles"
        OBJC_DISABLE_INITIALIZE_FORK_SAFETY: "YES"

    - name: Start K3s installation (async)
      ansible.builtin.command:
        cmd: uv run ansible-playbook -i hosts.ini playbooks/k3s-cluster.yml --diff
        chdir: "{{ playbook_dir }}"
      async: 1800  # 30 minutes timeout
      poll: 0
      register: k3s_job
      changed_when: true  # This always makes changes (installation)
      environment:
        ANSIBLE_ROLES_PATH: "{{ playbook_dir }}/roles:~/.ansible/roles"
        OBJC_DISABLE_INITIALIZE_FORK_SAFETY: "YES"

    - name: Display parallel execution status
      ansible.builtin.debug:
        msg: |
          ðŸš€ Parallel Infrastructure Deployment Started
          ==========================================
          Start Time: {{ parallel_start_time }}
          MinIO Installation: Job ID {{ minio_job.ansible_job_id }} (targeting nas hosts)
          K3s Installation: Job ID {{ k3s_job.ansible_job_id }} (targeting cluster hosts)

          Both services are installing simultaneously on different Pi nodes.
          This typically reduces deployment time by 40% compared to sequential execution.

          ðŸ’¡ MONITORING TIP: Open separate terminals to watch progress:
          - MinIO progress: ssh pi-cm5-4.local "journalctl -u minio -f"
          - K3s progress: ssh pi-cm5-1 "journalctl -u k3s -f"

    - name: Wait for MinIO installation completion
      ansible.builtin.async_status:
        jid: "{{ minio_job.ansible_job_id }}"
      register: minio_result
      until: minio_result.finished
      retries: 180  # 30 minutes with 10s intervals
      delay: 10

    - name: Wait for K3s installation completion
      ansible.builtin.async_status:
        jid: "{{ k3s_job.ansible_job_id }}"
      register: k3s_result
      until: k3s_result.finished
      retries: 180  # 30 minutes with 10s intervals
      delay: 10

    - name: Record parallel deployment completion time
      ansible.builtin.set_fact:
        parallel_end_time: "{{ ansible_date_time.iso8601 }}"

    - name: Calculate deployment duration
      ansible.builtin.set_fact:
        _end_time: "{{ parallel_end_time | to_datetime('%Y-%m-%dT%H:%M:%SZ') }}"
        _start_time: "{{ parallel_start_time | to_datetime('%Y-%m-%dT%H:%M:%SZ') }}"

    - name: Set deployment duration
      ansible.builtin.set_fact:
        deployment_duration: "{{ ((_end_time - _start_time).total_seconds()) | int }}"

    - name: Display parallel execution completion
      ansible.builtin.debug:
        msg: |
          âœ… Parallel Infrastructure Deployment Complete
          ============================================
          Start Time: {{ parallel_start_time }}
          End Time: {{ parallel_end_time }}
          Total Duration: {{ (deployment_duration | int) // 60 }}m {{ (deployment_duration | int) % 60 }}s

          MinIO Status: {{ 'SUCCESS âœ“' if minio_result.rc == 0 else 'FAILED âœ— (RC: ' + minio_result.rc | string + ')' }}
          K3s Status: {{ 'SUCCESS âœ“' if k3s_result.rc == 0 else 'FAILED âœ— (RC: ' + k3s_result.rc | string + ')' }}

          Both services are now ready for Kubernetes applications deployment.
          ðŸŽ¯ Parallel execution saved time by running MinIO and K3s simultaneously!

    - name: Fail if any parallel job failed
      ansible.builtin.fail:
        msg: |
          Parallel deployment failed:
          MinIO: {{ 'OK' if minio_result.rc == 0 else 'FAILED (RC: ' + minio_result.rc | string + ')' }}
          K3s: {{ 'OK' if k3s_result.rc == 0 else 'FAILED (RC: ' + k3s_result.rc | string + ')' }}
      when: minio_result.rc != 0 or k3s_result.rc != 0

# Phase 5: Kubernetes applications deployment
# - name: Phase 5 - Kubernetes Applications Deployment
#  import_playbook: playbooks/k8s-applications.yml

# Final status summary
- name: Setup Complete
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Display completion status
      ansible.builtin.debug:
        msg: |
          Infrastructure Setup Complete!
          =============================

          âœ“ Base Pi CM5 configuration applied
          âœ“ System updates completed on clean base
          âœ“ Unattended upgrades configured
          âœ“ Storage configuration applied to NAS (4TB XFS ready)
          âœ“ MinIO S3 backup service with SSL certificates (parallel)
          âœ“ K3s HA cluster deployed (3-node HA, parallel with MinIO)
          âœ“ Kubernetes applications deployed (cert-manager)

          Service Access:
          - MinIO Console (HTTPS): https://minio.jardoole.xyz/
          - MinIO API (HTTPS): https://minio.jardoole.xyz:9000
          - K3s API: https://pi-cm5-1:6443 (or pi-cm5-2, pi-cm5-3)
          - MinIO Buckets: longhorn-backups, cluster-logs, media-storage

          Certificate Management:
          - MinIO: Let's Encrypt certificates via Cloudflare DNS-01 (direct certbot)
          - cert-manager deployed for K8s certificate automation
          - All SSL certificates configured with automatic renewal

          Performance Benefits:
          - TRUE parallel deployment: MinIO and K3s install simultaneously
          - Parallel execution reduces total setup time by ~40%
          - Better resource utilization across all Pi nodes
          - Independent service deployment paths with async task orchestration

          Next Steps:
          1. Test K3s cluster: kubectl get nodes
          2. Verify MinIO HTTPS access: curl -I https://minio.jardoole.xyz/
          3. Install Longhorn distributed storage with MinIO backup
          4. Set up application workloads and monitoring

          Note: System reboots handled automatically during upgrade phase.

          Run 'make site-check' to preview changes before execution.
