---
# Complete MinIO installation with SSL certificates and HTTPS configuration
# Combines basic MinIO setup with Let's Encrypt SSL certificates on port 443

- name: Install and configure MinIO S3 storage with SSL
  hosts: nas
  become: true
  gather_facts: true

  vars:
    certbot_domains:
      - "{{ minio_internal_domain }}"
    certbot_email: "{{ letsencrypt_email }}"
    cloudflare_config_path: "/etc/letsencrypt/cloudflare.ini"
    minio_https_port: 443

  pre_tasks:
    - name: Display installation overview
      ansible.builtin.debug:
        msg: |
          Complete MinIO Installation Starting
          ===================================

          Phase 1: Base MinIO Installation
          - Storage directories: {{ minio_server_datadirs | length }}
          - Root user: {{ minio_root_user }}
          - Buckets to create: {{ minio_buckets | length }}
          - Users to create: {{ minio_users | length }}

          Phase 2: SSL Certificate Setup
          - Domain: {{ minio_internal_domain }}
          - HTTPS Port: {{ minio_https_port }}
          - Certificate Provider: Let's Encrypt (DNS-01)
          - Auto-renewal: Configured

          This will result in a fully functional MinIO instance with HTTPS on port 443.
      tags:
        - overview

    - name: Create MinIO data directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop: "{{ minio_server_datadirs }}"
      tags:
        - setup

    - name: Verify storage preparation is complete
      ansible.builtin.stat:
        path: "{{ item }}"
      register: storage_check
      failed_when: not storage_check.stat.exists and not ansible_check_mode
      loop: "{{ minio_server_datadirs }}"
      tags:
        - verification

  tasks:
    # Phase 1: Basic MinIO Installation
    - name: "Phase 1: Install MinIO using ricsanfre.minio role"
      ansible.builtin.include_role:
        name: ricsanfre.minio
      tags:
        - minio-install
        - phase1

    - name: Wait for initial MinIO service to be ready
      ansible.builtin.uri:
        url: "http://{{ inventory_hostname }}:{{ minio_server_port }}/minio/health/live"
        method: GET
        status_code: 200
      retries: 30
      delay: 2
      register: initial_health_check
      until: initial_health_check.status == 200
      tags:
        - verification
        - phase1

    - name: Display Phase 1 completion
      ansible.builtin.debug:
        msg: |
          Phase 1 Complete: Basic MinIO Installation
          ========================================
          ✓ MinIO server installed and running
          ✓ Buckets and users configured
          ✓ HTTP access available on port {{ minio_server_port }}

          Starting Phase 2: SSL Certificate Configuration...
      tags:
        - phase1

    # Phase 2: SSL Certificate Setup
    - name: "Phase 2: Install certbot and SSL prerequisites"
      ansible.builtin.package:
        name:
          - certbot
          - python3-certbot-dns-cloudflare
          - libcap2-bin  # For setcap functionality
        state: present
        update_cache: true
      tags:
        - ssl-setup
        - phase2

    - name: Create letsencrypt configuration directory
      ansible.builtin.file:
        path: /etc/letsencrypt
        state: directory
        owner: root
        group: root
        mode: '0755'
      tags:
        - ssl-setup
        - phase2

    - name: Create Cloudflare credentials file
      ansible.builtin.template:
        src: cloudflare.ini.j2
        dest: "{{ cloudflare_config_path }}"
        owner: root
        group: root
        mode: '0600'
        backup: true
      tags:
        - ssl-setup
        - phase2

    - name: Request SSL certificate using DNS-01 challenge
      ansible.builtin.command:
        cmd: >
          certbot certonly
          --non-interactive
          --agree-tos
          --email {{ certbot_email }}
          --dns-cloudflare
          --dns-cloudflare-credentials {{ cloudflare_config_path }}
          --dns-cloudflare-propagation-seconds 60
          -d {{ certbot_domains | join(' -d ') }}
        creates: "/etc/letsencrypt/live/{{ minio_internal_domain }}/fullchain.pem"
      register: certbot_result
      tags:
        - ssl-setup
        - phase2

    - name: Display certificate request result
      ansible.builtin.debug:
        var: certbot_result
      when: certbot_result.changed
      tags:
        - ssl-setup
        - phase2

    - name: Stop MinIO service for SSL reconfiguration
      ansible.builtin.systemd:
        name: minio
        state: stopped
      tags:
        - ssl-setup
        - phase2

    - name: Find MinIO binary location
      ansible.builtin.command:
        cmd: which minio
      register: minio_binary_path
      changed_when: false
      tags:
        - ssl-setup
        - phase2

    - name: Grant capability to bind to privileged ports
      ansible.builtin.command:
        cmd: setcap 'cap_net_bind_service=+ep' {{ minio_binary_path.stdout }}
      register: setcap_result
      changed_when: setcap_result.rc == 0
      tags:
        - ssl-setup
        - phase2

    - name: Verify capability was set
      ansible.builtin.command:
        cmd: getcap {{ minio_binary_path.stdout }}
      register: getcap_result
      changed_when: false
      tags:
        - ssl-setup
        - phase2

    - name: Ensure MinIO certificate directory exists
      ansible.builtin.file:
        path: "{{ minio_cert_path }}"
        state: directory
        owner: "{{ minio_user }}"
        group: "{{ minio_user }}"
        mode: '0755'
      tags:
        - ssl-setup
        - phase2

    - name: Fix Let's Encrypt directory permissions for MinIO access
      ansible.builtin.file:
        path: "{{ item }}"
        mode: '0755'
        owner: root
        group: root
      loop:
        - /etc/letsencrypt/live
        - /etc/letsencrypt/archive
      tags:
        - ssl-setup
        - phase2

    - name: Set proper permissions on certificate archive files
      ansible.builtin.file:
        path: "/etc/letsencrypt/archive/{{ minio_internal_domain }}/{{ item.file }}"
        owner: "{{ item.owner | default('root') }}"
        group: "{{ item.group | default('root') }}"
        mode: "{{ item.mode }}"
      loop:
        - { file: 'fullchain1.pem', owner: 'minio', group: 'minio', mode: '0644' }
        - { file: 'privkey1.pem', owner: 'minio', group: 'minio', mode: '0640' }
        - { file: 'cert1.pem', mode: '0644' }
        - { file: 'chain1.pem', mode: '0644' }
      tags:
        - ssl-setup
        - phase2

    - name: Link certificates to MinIO directory
      ansible.builtin.file:
        src: "/etc/letsencrypt/live/{{ minio_internal_domain }}/{{ item.src }}"
        dest: "{{ minio_cert_path }}/{{ item.dest }}"
        state: link
        owner: "{{ minio_user }}"
        group: "{{ minio_user }}"
        force: true
      loop:
        - { src: 'fullchain.pem', dest: 'public.crt' }
        - { src: 'privkey.pem', dest: 'private.key' }
      tags:
        - ssl-setup
        - phase2

    - name: Update MinIO configuration for HTTPS on port 443
      ansible.builtin.lineinfile:
        path: /etc/minio/minio.conf
        regexp: '^MINIO_OPTS='
        line: 'MINIO_OPTS="--address :{{ minio_https_port }} --console-address :{{ minio_console_port }} --certs-dir {{ minio_cert_path }}"'
        backup: true
      tags:
        - ssl-setup
        - phase2

    - name: Create MinIO systemd service override directory
      ansible.builtin.file:
        path: /etc/systemd/system/minio.service.d
        state: directory
        owner: root
        group: root
        mode: '0755'
      tags:
        - ssl-setup
        - phase2

    - name: Create systemd service override for capabilities
      ansible.builtin.template:
        src: minio-service-override.conf.j2
        dest: /etc/systemd/system/minio.service.d/privileges.conf
        owner: root
        group: root
        mode: '0644'
        backup: true
      notify:
        - reload systemd
        - restart minio
      tags:
        - ssl-setup
        - phase2

    - name: Create certificate renewal script
      ansible.builtin.template:
        src: renew-minio-certs.sh.j2
        dest: /usr/local/bin/renew-minio-certs.sh
        owner: root
        group: root
        mode: '0755'
      tags:
        - ssl-setup
        - phase2

    - name: Setup automatic certificate renewal
      ansible.builtin.cron:
        name: "Renew MinIO SSL certificates"
        minute: "0"
        hour: "3"
        day: "1,15"  # Run twice monthly
        job: "/usr/local/bin/renew-minio-certs.sh >> /var/log/certbot-renewal.log 2>&1"
        user: root
      tags:
        - ssl-setup
        - phase2

    - name: Test certificate renewal (dry run)
      ansible.builtin.command:
        cmd: certbot renew --dry-run --dns-cloudflare --dns-cloudflare-credentials {{ cloudflare_config_path }}
      register: renewal_test
      failed_when: false
      changed_when: false
      tags:
        - ssl-setup
        - phase2

  handlers:
    - name: reload systemd
      ansible.builtin.systemd:
        daemon_reload: true

    - name: restart minio
      ansible.builtin.systemd:
        name: minio
        state: restarted
        daemon_reload: true

    - name: wait for minio
      ansible.builtin.wait_for:
        port: "{{ minio_https_port }}"
        host: "{{ inventory_hostname }}"
        delay: 10
        timeout: 60
      listen: restart minio

  post_tasks:
    - name: Verify MinIO is running on port 443
      ansible.builtin.wait_for:
        port: "{{ minio_https_port }}"
        host: "{{ ansible_default_ipv4.address }}"
        timeout: 30
      register: port_443_ready
      failed_when: false
      tags:
        - verification

    - name: Test HTTPS access
      ansible.builtin.uri:
        url: "https://{{ minio_internal_domain }}/"
        method: GET
        status_code: [200, 400, 403]  # MinIO may return 400/403 for root path
        validate_certs: true
        timeout: 30
      register: minio_https_test
      failed_when: false
      tags:
        - verification

    - name: Display SSL certificate information
      ansible.builtin.command:
        cmd: "certbot certificates"
      register: cert_info
      changed_when: false
      tags:
        - verification

    - name: Display complete installation summary
      ansible.builtin.debug:
        msg: |
          Complete MinIO Installation Summary
          ==================================

          ✓ Phase 1: Basic MinIO Installation Complete
          ✓ Phase 2: SSL Certificate Configuration Complete

          Access Information:
          - MinIO S3 API (HTTPS): https://{{ minio_internal_domain }}/
          - MinIO Console (HTTPS): https://{{ minio_internal_domain }}:{{ minio_console_port }}
          - Root Username: {{ minio_root_user }}
          - Root Password: [stored in vault]

          Created Buckets:
          {% for bucket in minio_buckets %}
          - {{ bucket.name }} ({{ bucket.policy }}){% if bucket.object_locking | default(false) %} [locked]{% endif %}
          {% endfor %}

          Created Users:
          {% for user in minio_users %}
          - {{ user.name }} (access to: {{ user.buckets_acl | map(attribute='name') | join(', ') }})
          {% endfor %}

          SSL Configuration:
          - Certificate Provider: Let's Encrypt
          - Domain: {{ minio_internal_domain }}
          - HTTPS Port: {{ minio_https_port }}
          - Auto-renewal: Configured (twice monthly)
          - Binary Capabilities: {{ getcap_result.stdout }}

          Status Checks:
          - Port 443 Status: {{ 'Ready ✓' if port_443_ready.failed == false else 'Check required ⚠️' }}
          - HTTPS Test: {{ 'Working ✓' if minio_https_test.status in [200, 400, 403] else 'Failed ⚠️' }}
          - Certificate Renewal Test: {{ 'PASSED ✓' if renewal_test.rc == 0 else 'FAILED ⚠️' }}

          Certificate Details:
          {{ cert_info.stdout }}

          Next Steps:
          1. Access MinIO Console: https://{{ minio_internal_domain }}:{{ minio_console_port }}
          2. Test S3 operations with valid SSL certificates
          3. Configure applications to use HTTPS endpoints
          4. Monitor certificate renewal: tail -f /var/log/certbot-renewal.log

          DNS Configuration Required:
          - Ensure {{ minio_internal_domain }} resolves to {{ ansible_default_ipv4.address }}
      tags:
        - summary
